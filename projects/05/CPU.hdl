// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

 // instruction anatomy: i xx a cccccc ddd jjj

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
   	// Instruction decoder 
    Not(in=instruction[15], out=aInst); 
    Not(in=aInst, out=cInst); 

    //
    Mux16(a = AluOut ,b=instruction ,sel=aInst ,out = aRegIn);
    
    //
    Or(a=aInst,b=instruction[5] ,out= aLoadBit); // checking whether an a instruction or c instruction with d1 bit
    ARegister(in=aRegIn, load= aLoadBit,out =outAReg );
    Mux16(a=false, b=outAReg, sel=true, out[0..14]=addressM); 

    //
    Mux16(a = outAReg, b= inM, sel = instruction[12], out = AluY ); //AluY may consist of either outAReg or inM

    //
    DRegister(in= AluOut ,load=instruction[4] ,out= AluX );

    //
    ALU(x= AluX ,y= AluY ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=AluOut ,zr= zrOut ,ng= ngOut );
    Mux16(a=false, b=AluOut, sel=true, out=outM); 

    // PC implementation
        // jump j1 j2 j3 condition

        // JGT 0 0 1 if (ALU out > 0) jump
        Not(in = instruction[2], out = JGTj1);
        Not(in = instruction[1], out = JGTj2);
        And(a = JGTj1, b = JGTj2, out = JGTj1j2);
        And(a = JGTj1j2, b = instruction[0], out = JGT);

        // JEQ 0 1 0 if (ALU out = 0) jump
        Not(in = instruction[2], out = JEQj1);
        Not(in = instruction[0], out = JEQj3);
        And(a=JEQj1,b=JEQj3, out= JEQj1j3);
        And(a=instruction[1],b=JEQj1j3,out=JEQ);

        //JGE 0 1 1 if (ALU out ≥ 0) jump
        And(a=instruction[1],b=instruction[0],out=JGEj3j2);
        Or(a=instruction[2],b=JGEj3j2,out=JGE);

        //JLT 1 0 0 if (ALU out < 0) jump
        Not(in = instruction[0], out = JLTj3);
        Not(in = instruction[1], out = JLTj2);
        And(a = JLTj3, b = JLTj2, out = JLTj3j2);
        And(a = JLTj3j2, b = instruction[2], out = JLT);

        //JNE 1 0 1 if (ALU out ≠ 0) jump
        And(a=instruction[0],b=instruction[2],out = JNEj3j1);
        Or(a=JNEj3j1,b=instruction[1],out=JNE);

        //JLE 1 1 0 if (ALU out ≤ 0) jump
        And(a=instruction[1],b=instruction[2],out=JLEj1j2);
        Or(a=instruction[0],b=JLEj1j2,out=JLE);

        //JMP 1 1 1 Unconditional jump
        And(a=instruction[2],b=instruction[1],out=JMPj2j1);
        And(a=JMPj2j1,b=instruction[0],out=JMP);

        //will chanell all of above into one
        Or8Way (in[0]=false,in[1]=JGT, in[2]=JEQ, in[3]=JGE,in[4]=JLT,in[5]=JNE,in[6]=JLE,in[7]=JMP, out=PCLoadBit); 

        //whether to inc??
        Not(in=PCLoadBit,out=IncBit);

    PC(in= outAReg ,load= PCLoadBit,inc=true ,reset= reset,out[0..14]= pc);

    //Misc
    Mux(a=false, b=instruction[3], sel=cInst, out=writeM); 

    //debug:
    //Or16(a = instruction, b = outAReg, out = outM);

}